plugins {
    id('idea')
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.8"
}

version = "0.1"
group = "com.excalibur"

repositories {
    mavenCentral()
}

sourceSets {

    intTest {
        java.srcDir "$projectDir/src/intTest/groovy"

        resources {
            srcDirs += "$projectDir/src/intTest/resources"
        }
//        resources.srcDir "$projectDir/src/intTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

idea {
    module {
        testSourceDirs += sourceSets.intTest.java.srcDirs
        testResourceDirs += sourceSets.intTest.resources.srcDirs
    }
}

configurations {
    intTestImplementation {
        extendsFrom testImplementation
    }
    intTestRuntime {
        extendsFrom testRuntimeClasspath
    }

    intTestAnnotationProcessor {
        extendsFrom(annotationProcessor)
    }

}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.richard.*")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    tasks.withType(JavaCompile) {
//        options.fork = true
        options.compilerArgs += "--enable-preview"
    }
    tasks.withType(Test) {
        jvmArgs += "--enable-preview"
        reports.html.required = true
        reports.junitXml.required = false
    }

    tasks.withType(JavaExec) {
        jvmArgs += "--enable-preview"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

dependencies {
    annotationProcessor(project(":libs:annotation-processor"))

    implementation(project(":libs:annotations"))
    implementation(project(":libs:event-common"))

    annotationProcessor("org.immutables:value:${immutablesVersion}")
    implementation("org.immutables:value:${immutablesVersion}")

    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    implementation("org.apache.logging.log4j:log4j-core:2.14.1")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.14.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.14.1")
    testImplementation("org.assertj:assertj-core")

    implementation("io.micronaut:micronaut-validation")

    intTestImplementation("org.assertj:assertj-core")
    intTestImplementation("org.junit.jupiter:junit-jupiter-api")
    intTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            "--enable-preview",
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=com.richard.*',
    ]
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

application {
    mainClass.set("com.richard.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}

task intTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

intTest {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

//    maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)
    reports.junitXml.required = false
}



